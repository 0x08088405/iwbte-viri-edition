<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

l = 0;
r = 0;

// Instance Variables
gravity = 0.4 * global.pGravity;
jump1 = 8.5 * global.pGravity;
jump2 = 7 * global.pGravity;
onPlatform = false;
image_speed = 0.2;
frozen = false;
djump = false;
hscap = 3;
vscap = 9;
set_mask();
dir = 1;

// Autosaving
if (global.autosave) save(true);
global.autosave = false;

// Custom sprites should be set here
sFall  = sPlayerFall;
sIdle  = sPlayerIdle;
sJump  = sPlayerJump;
sRun   = sPlayerRunning;
sSlide = sPlayerSliding;

sprite_index = sIdle; // Ensuring it's the right sprite from creation

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug: Change V-Align

if (!frozen) {
    if (keyboard_check_pressed(global.k_debug_valign) &amp;&amp; global.debug) {
        var vf = floor(y);
        var va = y - vf;
        var newVa = get_integer("New V-Align:", va);
        if (newVa &gt;= 0) {
            y = vf + newVa;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

var h, onBlock, onConveyor, onVineL, onVineR;
h = 0; // Default (player not moving)

// Checking input
if (global.lrAnywhere) {
    l = keyboard_check_direct(global.k_left);
    r = keyboard_check_direct(global.k_right);
} else {
    l = keyboard_check(global.k_left);
    r = keyboard_check(global.k_right);
}

if (!frozen) {
    if (r) h = 1;
    else if (l) h = -1;
}

// Collision checks
onBlock = instance_place(x, y + global.pGravity, block);
onConveyor = instance_place(x, y + global.pGravity, conveyor);
onVineL = place_meeting(x - 1, y, vineL) &amp;&amp; !onBlock;
onVineR = place_meeting(x + 1, y, vineR) &amp;&amp; !onBlock;

// Movement
if (h != 0) {
    if (!onVineL &amp;&amp; !onVineR) dir = h; // Setting the direction the player is facing
    hspeed = hscap * h; // Setting speed
    sprite_index = sRun; image_speed = 0.5; // Running sprite
} else {
    hspeed = 0; // Stop moving
    sprite_index = sIdle; image_speed = 0.2; // Idle sprite
}

// Platform Magic
if (!onPlatform) {
    if (vspeed * global.pGravity &lt; -0.05) sprite_index = sJump;
    else if (vspeed * global.pGravity &gt; 0.05 ) sprite_index = sFall;
} else {
    if (!place_meeting(x, y + (4 * global.pGravity), platform)) onPlatform = false;
}

if (onConveyor) hspeed += onConveyor.cspeed; // Conveyor Magic
if (abs(vspeed) &gt; vscap) vspeed = sign(vspeed) * vscap; // Vspeed capping

if (onVineL || onVineR) {
    if (onVineR) dir = -1; else dir = 1; // Setting (inverse) player direction
    vspeed = 2 * global.pGravity; // Setting sliding speed
    sprite_index = sSlide; image_speed = 0.5; // Sliding sprite
    
    if ((onVineL &amp;&amp; keyboard_check_pressed(global.k_right)) ||
        (onVineR &amp;&amp; keyboard_check_pressed(global.k_left))) {
        if (keyboard_check(global.k_jump)) {
            // Jumping off from vines
            if (onVineR) hspeed = -15; else hspeed = 15; // Jumpoff hspeed
            vspeed = -9 * global.pGravity; // Jumpoff vspeed
            play_sound(seJump3); // Play vine-jump sound
            sprite_index = sJump; // Jumping sprite
        } else {
            // Falling off from vines
            if (onVineR) hspeed = -3; else hspeed = 3;
            sprite_index = sFall;
        }
    }
}

if (!frozen) {
    if (global.debug) {
        if (global.adTrick &amp;&amp; onBlock) {
            if (keyboard_check_pressed(ord("A"))) hspeed -= 1;
            else if (keyboard_check_pressed(ord("D"))) hspeed += 1;
        }
    
        if (keyboard_check(global.k_debug_drag) || mouse_check_button(global.k_debug_dragmouse)) {
            x = mouse_x; y = mouse_y; vspeed = 0;
        }
    }
    if (keyboard_check_pressed(global.k_jump)) {
        if (place_meeting(x, y + global.pGravity, block)
            || place_meeting(x, y + global.pGravity, platform)
            || place_meeting(x, y + global.pGravity, water)
            || onPlatform)
        {
            vspeed = -jump1; // First jump
            djump = true; // Make sure you can djump afterwards
            play_sound(seJump); // Jump sound
        } else if (djump || place_meeting(x, y + global.pGravity, water2) || global.infiniteJump) {
            djump = place_meeting(x, y + global.pGravity, water3);
            vspeed = -jump2; // Doublejump
            sprite_index = sJump; // Jumping sprite
            play_sound(seJump2); // Djump sound
        }
    }
    if (keyboard_check_released(global.k_jump)) {
        if (vspeed * global.pGravity &lt; 0) vspeed *= 0.45; // Jump released
    }
    if (keyboard_check_pressed(global.k_shoot)) {
        if (instance_number(bullet) &lt; global.bulletCap) {
            with (instance_create(x, y, bullet)) { // Create bullet
                hspeed = other.dir * 16; // Set speed (16px/f)
                alarm[0] = 40; // Destroy in 40 frames
                play_sound(seShoot); // Play sound
            }
        }
    }
    if (keyboard_check_pressed(global.k_suicide) &amp;&amp; global.canSuicide) die();
}

// Water Physics
if (place_meeting(x, y, water) || place_meeting(x, y, water2)) {
    if ((vspeed * global.pGravity) &gt; 2) vspeed = 2 * global.pGravity;
}

// Room Edge - Death, Switching or Wrapping
if (global.wrapPlayerX || global.wrapPlayerY) {
    if (global.wrapPlayerX) {
        if (x &gt; room_width) x -= room_width;
        else if (x &lt; 0) x += room_width;
    }
    if (global.wrapPlayerY) {
        if (y &gt; room_height) y -= room_height;
        else if (y &lt; 0) y += room_height;
    }
}

var intersect = false;
if (!global.wrapPlayerX) {
    if (x &gt; room_width) intersect = true;
    else if (x &lt; 0) intersect = true;
}
if (!global.wrapPlayerY) {
    if (y &gt; room_height) intersect = true;
    else if (y &lt; 0) intersect = true;
}

if (intersect) {
    if (instance_exists(intersectSwitch)) {
        with (instance_find(intersectSwitch, 0)) {
            if (!roomTo) die(); // If roomTo is noone, it's not set up. Die.
            if (autoNext) global.autosave = true; // Autosaving if set
            room_goto(roomTo);
        }
        
        instance_destroy(); // Destroy player, will be created by playerStart
    } else if (global.killPlayerOnEdge) {
        die(); // If there's no intersectSwitch, just die
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="killer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if(!global.god) die();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Magic
// It's the standard, bad implementation we all know and love

if (global.pGravity) {
    if (y - vspeed / 2 &lt;= other.y) {
        if (other.vspeed &gt;= 0) {
            y = other.y - 9;
            vspeed = other.vspeed;
            djump = true;
        }
        onPlatform = true;
        djump = true;
    }
} else {
    if (y - vspeed / 2 &gt;= other.y + 15) {
        if (other.vspeed &gt;= 0) {
            y = other.y + 23;
            vspeed = other.vspeed;
            djump = true;
        }
        onPlatform = true;
        djump = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision (No Solids!)

// Move back to before hsp/vsp was applied
x = xprevious;
y = yprevious;

// Snap to blocks Horizontally
if (instance_place(x + hspeed, y, block)) {
    if (global.pGravity) {
        if (hspeed &lt;= 0) while (instance_place(x - 1, y, block) == noone) x -= 1;
        if (hspeed &gt; 0) while (instance_place(x + 1, y, block) == noone) x += 1;
    } else {
        if (hspeed &lt; 0) while (instance_place(x - 1, y, block) == noone) x -= 1;
        if (hspeed &gt;= 0) while (instance_place(x + 1, y, block) == noone) x += 1;
    }
    hspeed = 0;
}

// Snap to blocks Vertically
if (instance_place(x, y + vspeed, block)) {
    if (global.pGravity == 1) {
        if (vspeed &lt;= 0) while (instance_place(x, y - 1, block) == noone) y -= 1;
        if (vspeed &gt; 0) {
            while (instance_place(x, y + 1, block) == noone) y += 1;
            djump = true;
        }
    } else {
        if (vspeed &lt;= 0) {
            while (instance_place(x, y - 1, block) == noone) y -= 1;
            djump = true;
        }
        if (vspeed &gt; 0) while (instance_place(x, y + 1, block) == noone) y += 1;
    }
    vspeed = 0;
}


if (instance_place(x + hspeed, y + vspeed, block)) hspeed = 0;

// Apply remaining hsp/vsp that we took at the start
x += hspeed;
y += vspeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing Self &amp; Hitbox

var xd, yd, a; xd = x; yd = y;
if (!global.pGravity) yd += 1.0;

yd = round(yd); // crispy GM8-like rounding (mm)

if (global.god)
    a = 0.7;
else
    a = 1.0;

if (global.drawPlayer)
    draw_sprite_ext(sprite_index, image_index, xd, yd, image_xscale * dir,
        image_yscale * global.pGravity, image_angle, image_blend, a);

if (global.drawHitbox)
    draw_sprite_ext(mask_index, image_index, x, y, image_xscale,
        image_yscale, image_angle, image_blend, a * 0.8);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
